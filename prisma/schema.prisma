// This is your Prisma schema file,

// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./models" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid()) /// @zod.cuid()
  username String @unique /// @zod.max(22)
  email    String @unique /// @zod.email("Invalid email address")
  phone    String @unique
  name     String /// @zod.max(50)

  services      Service[]            @relation(name: "UserService")
  ownedServices Service[]            @relation(name: "ServiceOwner")
  subscriptions Subscription[]
  emailInvites  ServiceUserInvites[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// TODO: allow email invites to manage a service
// TODO: setup an email provider to send invites to users if they don't have an account

model ServiceUserInvites {
  id String @id @default(cuid()) /// @zod.cuid()

  email String /// @zod.email()

  serviceId String /// @zod.cuid()
  userId    String? /// @zod.cuid()

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Service {
  id          String  @id @default(cuid()) /// @zod.cuid()
  name        String
  email       String /// @zod.email()
  description String? /// @zod.max(100)

  ownerId String /// @zod.cuid()

  owner        User                 @relation(name: "ServiceOwner", fields: [ownerId], references: [id])
  users        User[]               @relation(name: "UserService")
  plans        Plan[]
  emailInvites ServiceUserInvites[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Plan {
  id          String  @id @default(cuid()) /// @zod.cuid()
  name        String /// @zod.min(4).max(50)
  description String? /// @zod.min(4).max(100)

  serviceId String /// @zod.cuid()

  service      Service        @relation(fields: [serviceId], references: [id])
  billOptions  BillOption[]
  subscription Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum BillFrequency {
  NEVER
  ONE_TIME
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY

  @@map("Interval")
}

model BillOption {
  id       String        @id @default(cuid()) /// @zod.cuid()
  interval BillFrequency
  price    Float         @default(0.00) /// @zod.min(0).max(10000)
  isFree   Boolean       @default(false)

  planId String /// @zod.cuid()

  plan          Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("PlanInterval")
}

model Subscription {
  id       String  @id @default(cuid()) /// @zod.cuid()
  price    Float /// @zod.min(0)
  duration Int /// @zod.min(0)
  features String?

  serviceId    String /// @zod.cuid()
  userId       String /// @zod.cuid()
  planId       String /// @zod.cuid()
  billOptionId String /// @zod.cuid()

  plan       Plan       @relation(fields: [planId], references: [id])
  billOption BillOption @relation(fields: [billOptionId], references: [id])
  usere      User       @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, planId], name: "SubscriptionUnique")
}

model AuditLog {
  id String @id @default(cuid()) /// @zod.cuid()

  userId         String /// @zod.cuid()
  serviceId      String /// @zod.cuid()
  planId         String /// @zod.cuid()
  subscriptionId String /// @zod.cuid()

  action    String
  createdAt DateTime @default(now())
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  phone         String    @unique
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  services      Service[] @relation(name: "UserService")
  ownedServices Service[] @relation(name: "ServiceOwner")
}

// TODO: split out Service.Users into another table: ServiceUserInvites
// to prevent users from being added to a service without their consent

// TODO: setup an email provider to send invites to users if they don't have an account

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  owner       User     @relation(name: "ServiceOwner", fields: [ownerId], references: [id])
  ownerId     Int
  users       User[]   @relation(name: "UserService")
  plans       Plan[]
}

model Plan {
  id           Int            @id @default(autoincrement())
  name         String
  service      Service        @relation(fields: [serviceId], references: [id])
  serviceId    Int
  description  String?
  intervals    PlanInterval[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  subscription Subscription[]
}

enum Interval {
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}

model PlanInterval {
  id        Int      @id @default(autoincrement())
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    Int
  interval  Interval
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  serviceId Int
  userId    Int
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    Int
  price     Float
  duration  Int
  interval  Interval
  features  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AuditLog {
  id             Int      @id @default(autoincrement())
  userId         Int
  serviceId      Int
  planId         Int
  subscriptionId Int
  action         String
  createdAt      DateTime @default(now())
}
